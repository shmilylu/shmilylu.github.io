<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分类</title>
    <url>/2017/05/20/%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="密码学笔记"><a href="#密码学笔记" class="headerlink" title="密码学笔记"></a>密码学笔记</h2><p><img src="images/fenglei.png" alt=""></p>
<h3 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h3><ul>
<li><p>凯撒密码</p>
</li>
<li><p>简单替换密码</p>
</li>
<li><p>Enigma</p>
</li>
<li><p>攻击方法</p>
</li>
<li><p>暴力破解</p>
</li>
<li><p>频率分析</p>
</li>
</ul>
<h3 id="现代密码"><a href="#现代密码" class="headerlink" title="现代密码"></a>现代密码</h3><a id="more"></a>

<h4 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a>对称密码</h4><ul>
<li><p>DES（Data Encrypt Standard）</p>
<p><img src="images/DESjia.png" alt="DES"></p>
</li>
<li><p>DES的基本结构是由Horst Fesistel设计的，因此也称为Feistel网络，或结构，或者密码，在网络中，加密的各个步骤称为论，</p>
<p><img src="images/DESwangluo.png" alt="DES Feistel网络"></p>
<p><img src="images/mi.png" alt=""></p>
</li>
<li><p>3DES</p>
<p><img src="images/3DES.png" alt="3DES"></p>
</li>
<li><p>AES（advance encrypt standard）</p>
<p><img src="" alt=""></p>
</li>
<li><p>也被叫做Rijndael密码算法，它的分组长度为128比特，密钥长度只有（128，192，256） </p>
</li>
<li><p>对称密码的密钥配送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 通过事先协商密钥</span><br><span class="line">* 通过密钥分配中心</span><br><span class="line">* 通过diffle-Hellman 密钥交换</span><br><span class="line">* 通过公钥来</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="密码分类"><a href="#密码分类" class="headerlink" title="密码分类"></a>密码分类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">密码可以分为</span><br><span class="line">*</span><br><span class="line"> 流密码和 分组密码</span><br></pre></td></tr></table></figure>
<ul>
<li>分组密码<br>分组密码只能出来固定长度的数据块<br>分组密码有 DES 3DES AES</li>
<li>流密码<br>对数据流进行连续处理的密码，如 一次性密码</li>
</ul>
<h4 id="分组密码的模式"><a href="#分组密码的模式" class="headerlink" title="分组密码的模式"></a>分组密码的模式</h4><ul>
<li>ECB模式：Electronic CodeBook mode（电子密码模式）</li>
</ul>
<ul>
<li><p>CBC模式：Cipher Block Chaining mode（密码分组链接模式）</p>
<p><img src="images/CBCjiami.png" alt=""></p>
<p><img src="images/CBCshunhuai.png" alt=""></p>
<p><img src="images/CBCgongji.png" alt=""></p>
<p><img src="images/CBCbijiao.png" alt=""></p>
</li>
</ul>
<ul>
<li><p>CFB模式：Cipher FeedBack mode（密文反馈模式）</p>
<p><img src="images/CFBjiami.png" alt=""></p>
</li>
</ul>
<p><img src="images/CFBgongji.png" alt=""></p>
<p><img src="images/CBCCFB.png" alt=""></p>
<ul>
<li><p>OFB模式：Output FeedBack mode（输出反馈模式）</p>
<p><img src="images/OFBjiami.png" alt=""></p>
<p><img src="images/CFBOFB.png" alt=""></p>
</li>
<li><p>CTR模式：CounTeR mode（计数器模式）</p>
<p><img src="images/CTRjiami.png" alt=""></p>
</li>
</ul>
<p><img src="images/OFBCTR.png" alt=""></p>
<p><img src="images/quanduibi.png" alt=""></p>
<p><a href="http://www.beesfun.com/2017/03/06/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/" target="_blank" rel="noopener">分组密码模式及优缺点</a></p>
<h4 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h4><ul>
<li><p>公钥密码的不足</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 处理速度慢</span><br><span class="line">* 无法解决公钥认证问题，容易被中间人攻击</span><br></pre></td></tr></table></figure></li>
<li><p>RSA</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用了质因数分解的困难程度</span><br><span class="line">RSA 加密 ：密文&#x3D;</span><br></pre></td></tr></table></figure></li>
<li><p>RSA 攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用大整数分解困难的特性</span><br><span class="line">* 通过密文求明文，被看作是一个求对数问题</span><br><span class="line">* 通过暴力破解找出D</span><br><span class="line">* 对N进行质因素分解攻击--一旦发现对大整数进行质因数分解的高效算法，RSA就能被破译。</span><br><span class="line">* 中间人攻击--对任何公钥密码都有效。</span><br></pre></td></tr></table></figure></li>
<li><p>ElGanal 方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用mod N下求离散对数的困难程度</span><br></pre></td></tr></table></figure></li>
<li><p>Rabin方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">利用mod N下求平方根的困难程度</span><br></pre></td></tr></table></figure></li>
<li><p>椭圆曲线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">是通过椭圆曲线上特定点进行特殊的乘法运算来实现的，它利用乘法运算的逆运算非常困难这一特性。</span><br></pre></td></tr></table></figure>
<h4 id="混合密码系统"><a href="#混合密码系统" class="headerlink" title="混合密码系统"></a>混合密码系统</h4><p>由于对称密码存在密钥配送问题，而公钥密码存在处理速度慢，且很难抵御中间人攻击，因此将两种密码结合起来。但是依旧很难抵御中间人攻击。</p>
</li>
<li><p>混合密码加密</p>
<p><img src="images/hunhejiami.png" alt=""></p>
</li>
<li><p>混合密码解密</p>
<p><img src="images/hunhejiemi.png" alt=""></p>
</li>
</ul>
<h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><h5 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h5><ul>
<li>单向散列函数的一些性质<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 单向散列函数也称作消息摘要函数，哈希函数，杂凑函数，输入的消息也称为原像，输出散列值也称为消息摘要，或者指纹</span><br><span class="line">* 将消息输入，都会输出固定长度散列值，如md5（128比特，16字节），SHA-1（160比特，20字节），</span><br><span class="line">* 单向性</span><br><span class="line">* 弱抗碰撞性：要找到和该条消息具有相同的散列值的另外一条消息是非常难的。</span><br><span class="line">* 强抗碰撞性：要找到散列值相同的两条消息是非常难的。</span><br></pre></td></tr></table></figure></li>
<li>单向散列函数的应用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.检查文件是否被篡改。</span><br><span class="line">2.基于口令的加密</span><br><span class="line">3.消息认证码</span><br><span class="line">4.数字签名</span><br><span class="line">5.一次性口令</span><br></pre></td></tr></table></figure></li>
<li>对单向散列函数攻击<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 暴力破解</span><br><span class="line">2.生日攻击</span><br></pre></td></tr></table></figure></li>
<li>单向散列函数的不足<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单向散列函数虽然能识别“伪装”，但不能辨别出“伪装”</span><br></pre></td></tr></table></figure></li>
<li>单向散列函数的种类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* md4 md5 两个都产生的是128比特的散列值</span><br><span class="line">* SHA-1，SHA-1的消息长度存在上限，接近于2^64比特,输出160比特的散列值。SHA-1会将消息分成512比特的分组，若不能整除，则进行填充处理，使其长度为512比特的整数倍。</span><br><span class="line">* SHA-2:包括SHA-256，SHA-384，SHA-512</span><br><span class="line">* RIPMED-160</span><br><span class="line">* SHA-3</span><br></pre></td></tr></table></figure>
<h5 id="消息认证码"><a href="#消息认证码" class="headerlink" title="消息认证码"></a>消息认证码</h5>消息的完整性可以用单向散列函数来解决，但是要解决消息的认证，核对是正确的人发送消息，则需要消息认证码。<br>消息认证码的输入包括任意长度的消息和一个发送者与接收者共享的密钥，输入固定长度的数据，这个数据称为MAC值。</li>
<li>单向散列函数与消息认证码的比较</li>
<li>消息认证码的使用步骤</li>
<li>消息认证码的不足<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">存在共享密钥配送问题，如果共享密钥落入第三者手里，</span><br></pre></td></tr></table></figure></li>
<li>消息认证码使用实例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* SWIFT：SWIFT的全称是Society for Worldwide Interbank Financial Telecommunication（环境银行金融电信协会），是于1973年成立的一个组织，其目的是为国际银行之间的交易保驾护航。该组织成立时有15个成员国，2008年时，已经发展到了208个成员国。</span><br><span class="line"> 银行与银行之间是通过SWIFT来传递交易信息的。而为了确认消息的完整性以及对消息进行验证，SWIFT中使用了消息认证码。</span><br><span class="line"> 在使用公钥密码进行密钥交换之前，消息认证码所使用的共享密钥都是由人来进行配送的。</span><br><span class="line">* IPsec:是对互联网基本通信协议--IP协议增加安全性的一种协议，对通信内容的认证和完整性校验都采用消息认证码来完成。</span><br><span class="line">* SSL&#x2F;TLS：SSL&#x2F;TLS是我们在网上购物等场景中所使用的通信协议。 SSL&#x2F;TLS中对通信内容的认证和完整性校验也使用了消息认证吗。</span><br></pre></td></tr></table></figure></li>
<li>消息认证码的实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用单向散列函数实现: </span><br><span class="line">使用SHA-2之类的单向散列函数可以实现消息认证码，其中一种实现方法称为HMAC。</span><br><span class="line">2.使用分组密码实现:  </span><br><span class="line">使用AES之类的分组密码可以实现消息认证码。</span><br><span class="line"> 将分组密码的密钥作为消息认证码的共享密钥来使用，并用CBC模式将消息全部加密。此时，初始化向量是固定的。由于消息认证码不需要解密，因此将除最后一个分组以外的密文部分全部丢弃，而将最后一个分组用作MAC值。由于CBC模式的最后一个分组会受到整个消息以及密钥的双重影响，因此可以将它用作消息认证码。例如AES-CMAC（RFC4493）就是一种基于AES来实现的消息认证码。</span><br><span class="line">3.其他实现方法</span><br><span class="line"> 使用流密码和公钥密码等也可以实现消息认证码</span><br></pre></td></tr></table></figure>
<p><img src="images/xiaoxirenzhenma.png" alt=""></p>
<ul>
<li>认证加密</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 2000年以后，关于认证加密（缩写为AE或AEAD）的研究逐步展开。认证加密是一种将对称密码与消息认证相结合，同事满足机密性、完整性和认证三大功能的机制。</span><br><span class="line"> 有一种认证加密方式叫作Encrypt-then-MAC，这种方式是先用对称密码将明文加密，然后计算密文的MAC值。在Encrypt-then-MAC方式中，消息认证码的输入是消息的密文，通过MAC值就可以判断“这段密文的确是由制定明文和密钥的人生成多的”。使用这一机制，我们可以防止攻击者通过发送任意伪造的密文，并让服务器解密来套取信息的攻击。</span><br><span class="line"> 还有其他加密认证方式，如Encrypt-and-MAC（将明文用对称密码加密，并对明文计算MAC值）和MAC-then-Encrypt（先计算明文的MAC值，然后将明文和MAC值同时用对称密码加密）。</span><br></pre></td></tr></table></figure>
<ul>
<li><p>GCM与GMAC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> GCM（Galois&#x2F;Counter Mode）是一种加密认证方式。GCM中使用AES等128比特分组密码的CTR模式，并使用一个反复进行加法和乘法运算的散列函数来计算MAC值。由于CTR模式的本质是对递增的计数器值进行加密，因此可通过对若干分组进行并行处理提高运算速度。此外，由于CTR模式加密与MAC值计算使用的是相同的密钥，因此在密钥管理方面也更加容易。专门用于消息认证码的GCM称为GMAC。</span><br></pre></td></tr></table></figure></li>
<li><p>HMAC的详细介绍</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HMAC是一种使用简单单向散列函数来构造消息认证码的方法，其中HMAC的H就是Hash的意思。</span><br><span class="line"> HMAC中所使用的单向散列函数并不仅限于一种，任何高强度的单向散列函数都可以被用于HMAC，如果将来设计出新的单向散列函数，也同样可以使用。</span><br><span class="line"> 使用SHA-1、SHA-224、SHA-256、SHA-384、SHA-512所构造的MAC，分别称为HMAC-SHA1、HMAC-SHA-224、HMAC-SHA-256、HMAC-SHA-384、HMAC-SHA-512。</span><br><span class="line"></span><br><span class="line">1.HMAC的步骤</span><br><span class="line"></span><br><span class="line">使用单向散列函数实现消息认证码的例子.png</span><br><span class="line">* 密钥填充</span><br><span class="line"> 如果密钥比单向散列函数的分组长度要短，就需要在末尾填充0，知道其长度达到单向散列函数的分组长度为止。</span><br><span class="line"> 如果密钥分组长度要长，则要用单向散列函数求出密钥的散列值，然后将这个散列值用作HMAC的密钥。</span><br><span class="line">填充后的密钥与ipad的XOR</span><br><span class="line"> 将填充后的密钥与被称为ipad的比特序列进行XOR运算。ipad是将00110110这一比特序列不断循环反复直到达到分组所形成的比特序列，其中ipad的i是inner的意思。</span><br><span class="line">与消息结合,随后，将ipadkey与消息进行组合，也就是将和密钥相关的比特序列（ipadkey）附加在消息的开头。</span><br><span class="line">*计算散列值</span><br><span class="line"> 将（3）的结果输入单向散列函数，并计算出散列值。</span><br><span class="line">填充后的密钥与opad的XOR</span><br><span class="line"> 将填充后的免邮与被称为opad的比特序列进行XOR运算。opad是将01011100这一比特序列不断循环反复直到达到分组长度所形成的比特序列，其中opad的o是 outer的意思。</span><br><span class="line"> XOR运算所得到的结果也是一个和单向散列函数的分组长度相同，且和密钥相关的比特序列。这里我们将这个比特序列称为opadkey。</span><br><span class="line">与散列值组合</span><br><span class="line"> 将（4）的散列值拼在opadkey后面。</span><br><span class="line">计算散列值</span><br><span class="line"> 将（6）的结果输入单向散列函数，并计算出散列值。这个散列值就是最终的MAC值。</span><br><span class="line">通过上述流程，最后得到MAC值，一定是一个和输入的消息长度以及密钥都相关的长度固定的比特序列。</span><br></pre></td></tr></table></figure>
<p><img src="images/HAMC.png" alt=""></p>
</li>
<li><p>对消息认证码的攻击<br>1.重放攻击</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">攻击者将事先保存正确的MAC值，不断重放发动攻击，即将MAC值保存下来重复利用，这种方式成为重放攻击。</span><br><span class="line">1.序号</span><br><span class="line"> 约定每次都对发送的消息赋予一个递增的编号（序号），并且在计算MAC值时将这个序号也包含在消息中，这样一来，由于攻击者无法计算序号递增之后MAC值，因此就可以抵御重放攻击。这种方法虽然有效，但是对每个通信对象都需要积累最后一个消息的序号。</span><br><span class="line">2.时间戳</span><br><span class="line"> 约定在发送消息时包含当前的时间，如果收到以前的消息，即便MAC正确也将其当做错误的消息来处理，这样就能欧防御重放攻击。这种方法虽然有效，但是发送者和接收者的时钟必须一致，而且考虑到通信的延迟，必须在时间判断上流下缓冲，于是多多少少还是会存在重放攻击的的空间的。</span><br><span class="line">3.nonce</span><br><span class="line"> 在通信之前，接收者先向发送者发送一个一次性的随机数，这个随机数一般称为nonce。发送者咋消息中包含这个nonce并计算MAC值。由于每次通信时nonce的值都会发生变化，因此无法进行重放攻击。这种方法虽然有效，但通信的数据量会有所增加。</span><br></pre></td></tr></table></figure>
<p>2.密钥推测攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 和单向散列函数的攻击一样，对消息认证码也可以进行暴力破解以及生日攻击。</span><br><span class="line"> 对消息认证码来说，应保证不能根据MAC值推测出通信双方所使用的密钥。如果主动攻击者能够从MAC值算出密钥，就可以进行篡改、伪装等攻击。例如HMAC中就是利用单向散列函数的单向性和抗碰撞性来保证无法根据MAC值推测出密钥的。</span><br><span class="line"> 此外，在生成消息认证码所使用的密钥时，必须使用密码学安全的、高强度的伪随机数生成器。如果密钥是认为选定，则会增加密钥别推测的风险。</span><br></pre></td></tr></table></figure>
<h5 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h5><p>公钥证书是由认证机构施加数字签名的公钥证书，简称证书，用来使公钥可信合法。</p>
<ul>
<li>证书的标准规范X.509<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">签名前的证书---签名对象的信息</span><br><span class="line">数字签名算法--对证书签名时所使用的算法</span><br><span class="line">数字签名--对证书施加的数字签名</span><br></pre></td></tr></table></figure></li>
<li>公钥基础设施（PKI）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PKI是一个总称，而并非是指单独的规范。PKI包含以下三要素</span><br><span class="line">用户 ---使用PKI的人</span><br><span class="line">认证机构---颁发证书的人</span><br><span class="line">仓库---保存证书的数据库</span><br></pre></td></tr></table></figure></li>
<li>认证机构的工作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成密钥对</span><br><span class="line">注册证书</span><br><span class="line">作废证书和CRL（证书作废清单）</span><br></pre></td></tr></table></figure></li>
<li>对证书的攻击<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在公钥注册之前进行攻击 ：在认证机构施加数字签名之前的公钥进行攻击</span><br><span class="line">2.注册相似人名进行攻击</span><br><span class="line">3.窃取认证机构的私钥进行攻击</span><br><span class="line">4.攻击者伪装成认证机构进行攻击</span><br><span class="line">5.钻CRL的空子进行攻击</span><br></pre></td></tr></table></figure>
<h4 id="密钥-随机数与应用技术"><a href="#密钥-随机数与应用技术" class="headerlink" title="密钥 随机数与应用技术"></a>密钥 随机数与应用技术</h4>#####密钥 </li>
</ul>
<p>在使用对称密码，公钥密码，消息认证码，数字签名等密码技术使用，都需要一个称为密钥的巨大数字。然而，数字本身的大小并不重要，重要的是密钥空间的大小，也就是能出现密钥的总数量，因为密钥空间越大，爆力破解就越困难，密钥空间的大小是由密钥长度决定的。</p>
<ul>
<li><p>常见的密钥长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DES 密钥 ：实质长度为56比特（7比特的校验）</span><br><span class="line">3DES 密钥长度168比特（21比特）</span><br><span class="line">AES 密钥长度可以从128，192，256比特进行选择。</span><br></pre></td></tr></table></figure></li>
<li><p>生成密钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用随机数生成密钥</span><br><span class="line">用口令生成密钥</span><br></pre></td></tr></table></figure></li>
<li><p>密钥的配送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">事先共享密钥</span><br><span class="line">使用密钥分配中心</span><br><span class="line">使用公钥密码</span><br><span class="line">使用Diffie-Hellman密钥交换</span><br></pre></td></tr></table></figure></li>
<li><p>密钥的保存<br>由于人类无法记住密钥，因此需要将密钥存储，为了保证机密性，需要将密钥加密存储。</p>
</li>
<li><p>diffie-Hellman密钥交换步骤</p>
</li>
</ul>
<ul>
<li>基于口令的密码</li>
</ul>
<p>是一种根据口令生成密钥并用该密钥进行加密的方法，其中加密和解密使用同一个密钥。</p>
<p>盐是由伪随机数生成的随机数，在生成密钥是和口令一起输入单向散列函数，用来防御字典攻击的，</p>
<h5 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h5><ul>
<li>随机数的应用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生成密钥：用于对称密码和消息认证码</span><br><span class="line">生成密钥对：用于公钥密码和数字签名</span><br><span class="line">初始化向量（IV）：用于分组密码的CBC，CFB，OFB模式</span><br><span class="line">生成nonce：用于防御重放攻击以及分组密码的CTR模式等</span><br><span class="line">生成盐：用于基于口令的密码</span><br></pre></td></tr></table></figure></li>
<li>随机数的性质<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">随机性</span><br><span class="line">不可预测性</span><br><span class="line">不可重现性</span><br></pre></td></tr></table></figure></li>
<li>随机数的生成<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">随机数可以通过硬件生成，也可以通过软件生成，像这样的硬件设备就称为随机数生成器（RNG），生成随机数的软件则称为伪随机数生成器（PRNG）</span><br></pre></td></tr></table></figure></li>
<li>具体的伪随机数生成器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.杂乱的方法</span><br><span class="line">2.线性同余法</span><br><span class="line">3.单向散列函数法</span><br><span class="line">4.密码法</span><br><span class="line">5.ANSI X9.17</span><br></pre></td></tr></table></figure></li>
<li>对伪随机数的攻击<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对种子进行攻击</span><br><span class="line">对随机数池进行攻击</span><br></pre></td></tr></table></figure>
<h4 id="PGP"><a href="#PGP" class="headerlink" title="PGP"></a>PGP</h4></li>
<li>PGP的功能<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对称密码</span><br><span class="line">公钥密码</span><br><span class="line">数字签名</span><br><span class="line">单向散列函数</span><br><span class="line">证书</span><br><span class="line">压缩</span><br><span class="line">文本数据</span><br><span class="line">大文件的拆分和拼合</span><br><span class="line">钥匙串管理</span><br></pre></td></tr></table></figure>
<h5 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h5></li>
<li>TLS 层次架构</li>
<li>对TLS的攻击<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对各个密码技术的攻击</span><br><span class="line">对伪随机数生成器的攻击</span><br><span class="line">利用证书的时间差进行攻击</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
</search>
